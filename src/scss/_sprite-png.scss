// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$create-btn-name: 'create-btn';
$create-btn-x: 0px;
$create-btn-y: 0px;
$create-btn-offset-x: 0px;
$create-btn-offset-y: 0px;
$create-btn-width: 469px;
$create-btn-height: 93px;
$create-btn-total-width: 469px;
$create-btn-total-height: 253px;
$create-btn-image: '../img/sprite-png.png';
$create-btn: (0px, 0px, 0px, 0px, 469px, 93px, 469px, 253px, '../img/sprite-png.png', 'create-btn', );
$create-name: 'create';
$create-x: 0px;
$create-y: 182px;
$create-offset-x: 0px;
$create-offset-y: -182px;
$create-width: 126px;
$create-height: 71px;
$create-total-width: 469px;
$create-total-height: 253px;
$create-image: '../img/sprite-png.png';
$create: (0px, 182px, 0px, -182px, 126px, 71px, 469px, 253px, '../img/sprite-png.png', 'create', );
$fame-name: 'fame';
$fame-x: 188px;
$fame-y: 97px;
$fame-offset-x: -188px;
$fame-offset-y: -97px;
$fame-width: 142px;
$fame-height: 68px;
$fame-total-width: 469px;
$fame-total-height: 253px;
$fame-image: '../img/sprite-png.png';
$fame: (188px, 97px, -188px, -97px, 142px, 68px, 469px, 253px, '../img/sprite-png.png', 'fame', );
$name-name: 'name';
$name-x: 0px;
$name-y: 97px;
$name-offset-x: 0px;
$name-offset-y: -97px;
$name-width: 184px;
$name-height: 81px;
$name-total-width: 469px;
$name-total-height: 253px;
$name-image: '../img/sprite-png.png';
$name: (0px, 97px, 0px, -97px, 184px, 81px, 469px, 253px, '../img/sprite-png.png', 'name', );
$spritesheet-width: 469px;
$spritesheet-height: 253px;
$spritesheet-image: '../img/sprite-png.png';
$spritesheet-sprites: ($create-btn, $create, $fame, $name, );
$spritesheet: (469px, 253px, '../img/sprite-png.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
